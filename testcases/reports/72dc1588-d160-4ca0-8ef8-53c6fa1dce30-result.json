{"name": "test_checkout", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.JavascriptException: Message: javascript error: {\"status\":11,\"value\":\"Element is not currently visible and may not be manipulated\"}\n  (Session info: chrome=131.0.6778.109)\nStacktrace:\n\tGetHandleVerifier [0x00007FF725A06CC5+28821]\n\t(No symbol) [0x00007FF725973850]\n\t(No symbol) [0x00007FF72581578A]\n\t(No symbol) [0x00007FF72581C2ED]\n\t(No symbol) [0x00007FF72581EFCC]\n\t(No symbol) [0x00007FF72581F09F]\n\t(No symbol) [0x00007FF72586D88D]\n\t(No symbol) [0x00007FF72585D831]\n\t(No symbol) [0x00007FF72588F2FA]\n\t(No symbol) [0x00007FF72585C3F6]\n\t(No symbol) [0x00007FF72588F510]\n\t(No symbol) [0x00007FF7258AF412]\n\t(No symbol) [0x00007FF72588F0A3]\n\t(No symbol) [0x00007FF72585A778]\n\t(No symbol) [0x00007FF72585B8E1]\n\tGetHandleVerifier [0x00007FF725D3FCCD+3408029]\n\tGetHandleVerifier [0x00007FF725D5743F+3504143]\n\tGetHandleVerifier [0x00007FF725D4B61D+3455469]\n\tGetHandleVerifier [0x00007FF725ACBDCB+835995]\n\t(No symbol) [0x00007FF72597EB6F]\n\t(No symbol) [0x00007FF72597A824]\n\t(No symbol) [0x00007FF72597A9BD]\n\t(No symbol) [0x00007FF72596A1A9]\n\tBaseThreadInitThunk [0x00007FFBDA657374+20]\n\tRtlUserThreadStart [0x00007FFBDC59CC91+33]", "trace": "self = <testcases.test_shoppingflow.TestCompleteFlow object at 0x000001B6A4F40C50>\n\n    def test_checkout(self):\n        co = CheckOut(self.driver)\n>       co.check_out(\"India\", \"Bhopal\",\"add0001\", \"addd002\",\"34556\",\"1234567890\")\n\ntest_shoppingflow.py:26: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n..\\pages\\checkout_item.py:65: in check_out\n    self.enter_country(countryname)\n..\\pages\\checkout_item.py:28: in enter_country\n    sel.select_by_visible_text(countryname)\nC:\\Users\\amitd.sharma_infobea\\PycharmProjects\\AutomationProject1\\.venv\\Lib\\site-packages\\selenium\\webdriver\\support\\select.py:117: in select_by_visible_text\n    self._set_selected(opt)\nC:\\Users\\amitd.sharma_infobea\\PycharmProjects\\AutomationProject1\\.venv\\Lib\\site-packages\\selenium\\webdriver\\support\\select.py:214: in _set_selected\n    option.click()\nC:\\Users\\amitd.sharma_infobea\\PycharmProjects\\AutomationProject1\\.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:94: in click\n    self._execute(Command.CLICK_ELEMENT)\nC:\\Users\\amitd.sharma_infobea\\PycharmProjects\\AutomationProject1\\.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:395: in _execute\n    return self._parent.execute(command, params)\nC:\\Users\\amitd.sharma_infobea\\PycharmProjects\\AutomationProject1\\.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:384: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000001B6A4F112E0>\nresponse = {'status': 500, 'value': '{\"value\":{\"error\":\"javascript error\",\"message\":\"javascript error: {\\\\\"status\\\\\":11,\\\\\"value\\...07FF72596A1A9]\\\\n\\\\tBaseThreadInitThunk [0x00007FFBDA657374+20]\\\\n\\\\tRtlUserThreadStart [0x00007FFBDC59CC91+33]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.JavascriptException: Message: javascript error: {\"status\":11,\"value\":\"Element is not currently visible and may not be manipulated\"}\nE         (Session info: chrome=131.0.6778.109)\nE       Stacktrace:\nE       \tGetHandleVerifier [0x00007FF725A06CC5+28821]\nE       \t(No symbol) [0x00007FF725973850]\nE       \t(No symbol) [0x00007FF72581578A]\nE       \t(No symbol) [0x00007FF72581C2ED]\nE       \t(No symbol) [0x00007FF72581EFCC]\nE       \t(No symbol) [0x00007FF72581F09F]\nE       \t(No symbol) [0x00007FF72586D88D]\nE       \t(No symbol) [0x00007FF72585D831]\nE       \t(No symbol) [0x00007FF72588F2FA]\nE       \t(No symbol) [0x00007FF72585C3F6]\nE       \t(No symbol) [0x00007FF72588F510]\nE       \t(No symbol) [0x00007FF7258AF412]\nE       \t(No symbol) [0x00007FF72588F0A3]\nE       \t(No symbol) [0x00007FF72585A778]\nE       \t(No symbol) [0x00007FF72585B8E1]\nE       \tGetHandleVerifier [0x00007FF725D3FCCD+3408029]\nE       \tGetHandleVerifier [0x00007FF725D5743F+3504143]\nE       \tGetHandleVerifier [0x00007FF725D4B61D+3455469]\nE       \tGetHandleVerifier [0x00007FF725ACBDCB+835995]\nE       \t(No symbol) [0x00007FF72597EB6F]\nE       \t(No symbol) [0x00007FF72597A824]\nE       \t(No symbol) [0x00007FF72597A9BD]\nE       \t(No symbol) [0x00007FF72596A1A9]\nE       \tBaseThreadInitThunk [0x00007FFBDA657374+20]\nE       \tRtlUserThreadStart [0x00007FFBDC59CC91+33]\n\nC:\\Users\\amitd.sharma_infobea\\PycharmProjects\\AutomationProject1\\.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:232: JavascriptException"}, "start": 1734160207950, "stop": 1734160208038, "uuid": "201d5b8f-e164-4884-8b80-2cb5964c1864", "historyId": "952aaa8bfbd73e73b5bc812d4d5bfc9a", "testCaseId": "952aaa8bfbd73e73b5bc812d4d5bfc9a", "fullName": "test_shoppingflow.TestCompleteFlow#test_checkout", "labels": [{"name": "tag", "value": "@pytest.mark.usefixtures('setUp')"}, {"name": "suite", "value": "test_shoppingflow"}, {"name": "subSuite", "value": "TestCompleteFlow"}, {"name": "host", "value": "IB-SEZ-LAP-525"}, {"name": "thread", "value": "8332-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test_shoppingflow"}]}